# public
asynq.client.disabled: "Asynq client disabled, skip initialization"
asynq.client.init.failed: "Failed to initialize Asynq client"
asynq.client.init.success: "Asynq client initialized successfully"
asynq.client.nil: "Asynq client not initialized, please call InitClient first"
asynq.enqueue.failed: "Failed to enqueue task to queue {{.queue}}, error: {{.error}}"
asynq.server.disabled: "Asynq server disabled, skip initialization"
asynq.server.error.handler: "Task handler error: task ID {{.taskID}}, task type {{.taskType}}, error: {{.error}}"
asynq.server.init.failed: "Failed to initialize Asynq server"
asynq.server.init.success: "Asynq server initialized successfully"
asynq.server.not.initialized: "Asynq server not initialized"
asynq.server.start.failed: "Failed to start async task processor"
common.badRequest: "Bad Request"
common.forbidden: "Forbidden"
common.invalidParameter: "Invalid parameter"
common.notFound: "Not Found"
common.serverError: "Server Error"
common.success: "Success"
common.unauthorized: "Unauthorized"
config.load.failed: "Failed to load configuration"
db.connection.close.failed: "Failed to close database connection"
db.connection.failed: "Failed to connect to database"
db.connection.init: "Initialize database connection"
db.init.failed: "Database initialization failed"
db.not_initialized: "Database not initialized"
db.not_initialized_or_disabled: "Database not initialized or disabled"
db.unsupported_type: "Unsupported database type: {{.type}}"
httpclient.ca.read_failed: "Failed to read CA certificate"
httpclient.cert.load_failed: "Failed to load client certificate"
httpclient.error.invalid_status_code: "Invalid status code: {{.status}}, request URL: {{.url}}, response body: {{.body}}"
httpclient.init.failed: "Failed to initialize HTTP client"
httpclient.json.parse_failed: "Failed to parse JSON response"
httpclient.log.request: "HTTP request"
httpclient.log.request_body: "HTTP request body"
httpclient.log.response: "HTTP response"
httpclient.log.response_body: "HTTP response body"
httpclient.middleware.process_failed: "Middleware failed to process request"
httpclient.proxy.parse_failed: "Failed to parse proxy URL"
httpclient.request.create_failed: "Failed to create HTTP request"
httpclient.request.serialize_failed: "Failed to serialize request body"
httpclient.response.failed: "HTTP request failed: status code {{.code}}, response body: {{.body}}"
httpclient.response.read_failed: "HTTP request failed: status code {{.code}}, failed to read response body"
httpclient.retry.attempt: "HTTP request retrying ({{.attempt}}/{{.max}})"
httpclient.retry.middleware_failed: "Middleware failed to process request during retry"
httpclient.retry.reader_unsupported: "Cannot retry with io.Reader type request body"
httpclient.retry.request_failed: "Failed to create HTTP request during retry"
httpclient.service.config_not_found: "Service config not found: {{.service}}"
httpclient.service.not_initialized: "HTTP service not initialized"
i18n.init.success: "I18n init success, default locale: {{.locale}}"
i18n.locale.missing: "Missing locale parameter"
i18n.locale.set.success: "Locale set successfully"
log.http.request: "HTTP Request: {{.method}} {{.path}}"
logger.init.failed: "Failed to initialize logger"
middleware.recovery.broken_pipe: "Broken pipe detected"
middleware.recovery.internal_error: "Internal server error: %v"
middleware.recovery.recovered: "Recovered from panic"
redis.client.close.failed: "Failed to close Redis client: {{.error}}"
redis.connect.failed: "Failed to initialize Redis"
redis.connect.success: "Redis connected successfully"
redis.flushdb.failed: "Failed to flush Redis database"
redis.flushdb.success: "Redis database flushed successfully"
redis.init.failed: "Failed to initialize Redis"
redis.not_initialized_or_disabled: "Redis not initialized or disabled"
server.shutdown.forced: "Server forced shutdown"
server.shutdown.starting: "Shutting down server..."
server.shutdown.success: "Server shutdown successfully"
server.start.failed: "Failed to start server"
server.start.success: "Server started"
service.unknown: "Unknown service type"
service.usage: "Please specify service to run:"
service.web: "  web     - Run web service"
service.worker: "  worker  - Run worker service"
worker.process.start: "Worker process started"
worker.process.stop: "Worker process stopped"

# custom
kbcenter.dir_not_found: "Directory not found: {{.path}}"
kbcenter.file_not_found: "File not found: {{.path}}"
kbcenter.getwd_failed: "Failed to get working directory: {{.error}}"
kbcenter.invalid_end_line: "Invalid end line: {{.line}}"
kbcenter.invalid_line_range: "Invalid line range: start {{.start}} > end {{.end}}"
kbcenter.invalid_start_line: "Invalid start line: {{.line}}"
kbcenter.read_dir_failed: "Failed to read directory: {{.error}}"
kbcenter.read_file_failed: "Failed to read file: {{.error}}"
kbcenter.workdir: "Working directory: {{.workdir}}"
language.invalid_language: "Invalid language: {{.lang}}"
language.query_error: "Query error: {{.error}}"
language.unsupported: "Unsupported language: {{.lang}}"
language.unsupported_file_type: "Unsupported file type: {{.type}}"
review_task.invalid_file_path: "Invalid file path: {{.path}}"
review_task.invalid_line_range: "Invalid line range: start {{.start}} > end {{.end}}"
review_task.invalid_target_type: "Invalid target type: {{.type}}"

